package io.github.cjkent;

import java.util.Map;
import java.util.NoSuchElementException;

import org.joda.beans.Bean;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import io.github.cjkent.kjb.Foo;

@BeanDefinition
public final class JodaBeanContainsFoo implements ImmutableBean {

    @PropertyDefinition(validate = "notNull")
    private final Foo foo;

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code JodaBeanContainsFoo}.
   * @return the meta-bean, not null
   */
  public static JodaBeanContainsFoo.Meta meta() {
    return JodaBeanContainsFoo.Meta.INSTANCE;
  }

  static {
    MetaBean.register(JodaBeanContainsFoo.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static JodaBeanContainsFoo.Builder builder() {
    return new JodaBeanContainsFoo.Builder();
  }

  private JodaBeanContainsFoo(
      Foo foo) {
    JodaBeanUtils.notNull(foo, "foo");
    this.foo = foo;
  }

  @Override
  public JodaBeanContainsFoo.Meta metaBean() {
    return JodaBeanContainsFoo.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the foo.
   * @return the value of the property, not null
   */
  public Foo getFoo() {
    return foo;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      JodaBeanContainsFoo other = (JodaBeanContainsFoo) obj;
      return JodaBeanUtils.equal(foo, other.foo);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(foo);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("JodaBeanContainsFoo{");
    buf.append("foo").append('=').append(JodaBeanUtils.toString(foo));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code JodaBeanContainsFoo}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code foo} property.
     */
    private final MetaProperty<Foo> foo = DirectMetaProperty.ofImmutable(
        this, "foo", JodaBeanContainsFoo.class, Foo.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "foo");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 101574:  // foo
          return foo;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public JodaBeanContainsFoo.Builder builder() {
      return new JodaBeanContainsFoo.Builder();
    }

    @Override
    public Class<? extends JodaBeanContainsFoo> beanType() {
      return JodaBeanContainsFoo.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code foo} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Foo> foo() {
      return foo;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 101574:  // foo
          return ((JodaBeanContainsFoo) bean).getFoo();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code JodaBeanContainsFoo}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<JodaBeanContainsFoo> {

    private Foo foo;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(JodaBeanContainsFoo beanToCopy) {
      this.foo = beanToCopy.getFoo();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 101574:  // foo
          return foo;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 101574:  // foo
          this.foo = (Foo) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public JodaBeanContainsFoo build() {
      return new JodaBeanContainsFoo(
          foo);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the foo.
     * @param foo  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder foo(Foo foo) {
      JodaBeanUtils.notNull(foo, "foo");
      this.foo = foo;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("JodaBeanContainsFoo.Builder{");
      buf.append("foo").append('=').append(JodaBeanUtils.toString(foo));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
